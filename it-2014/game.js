// Generated by CoffeeScript 1.8.0
(function() {
  var blockRandomDir, board_size, getDirShift, getRandomInt, makeSourceMap, map, renderSourceMap;

  board_size = 9;

  map = [];

  getRandomInt = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  getDirShift = function() {
    var dir, shift_col, shift_row;
    shift_row = 0;
    shift_col = 0;
    dir = getRandomInt(0, 3);
    if (dir === 1) {
      shift_row = 1;
    } else if (dir === 2) {
      shift_row = -1;
    } else if (dir === 3) {
      shift_col = 1;
    } else {
      shift_col = -1;
    }
    return {
      row: shift_row,
      col: shift_col
    };
  };

  blockRandomDir = function(row, col) {
    var shift;
    shift = getDirShift();
    if (!map[row + shift.row][col + shift.col]) {
      map[row + shift.row][col + shift.col] = -1;
      return map[row + shift.row * 2][col + shift.col * 2] = -1;
    }
  };

  makeSourceMap = function(size) {
    var col, free, i, idx, last_index, row, server, shift, shift_col, shift_row, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _ref, _ref1, _s, _t, _u, _v;
    last_index = size * 3 - 1;
    map = [];
    for (row = _i = 0; 0 <= last_index ? _i <= last_index : _i >= last_index; row = 0 <= last_index ? ++_i : --_i) {
      row = [];
      for (col = _j = 0; 0 <= last_index ? _j <= last_index : _j >= last_index; col = 0 <= last_index ? ++_j : --_j) {
        row.push(0);
      }
      map.push(row);
    }
    for (idx = _k = 0; 0 <= last_index ? _k <= last_index : _k >= last_index; idx = 0 <= last_index ? ++_k : --_k) {
      map[0][idx] = -1;
      map[last_index][idx] = -1;
      map[idx][0] = -1;
      map[idx][last_index] = -1;
    }
    server = {
      row: getRandomInt(1, size - 2),
      col: getRandomInt(1, size - 2)
    };
    for (shift_row = _l = -2; _l <= 2; shift_row = ++_l) {
      for (shift_col = _m = -2; _m <= 2; shift_col = ++_m) {
        map[server.row * 3 + 1 + shift_row][server.col * 3 + 1 + shift_col] = -1;
      }
    }
    map[server.row * 3 + 1][server.col * 3 + 1] = -2;
    shift = getDirShift();
    map[server.row * 3 + 1 + shift.row][server.col * 3 + 1 + shift.col] = -2;
    map[server.row * 3 + 1 + shift.row * 2][server.col * 3 + 1 + shift.col * 2] = 1;
    for (row = _n = 0, _ref = size - 1; 0 <= _ref ? _n <= _ref : _n >= _ref; row = 0 <= _ref ? ++_n : --_n) {
      for (col = _o = 0, _ref1 = size - 1; 0 <= _ref1 ? _o <= _ref1 : _o >= _ref1; col = 0 <= _ref1 ? ++_o : --_o) {
        map[row * 3][col * 3] = -1;
        map[row * 3][col * 3 + 2] = -1;
        map[row * 3 + 2][col * 3] = -1;
        map[row * 3 + 2][col * 3 + 2] = -1;
      }
    }
    for (i = _p = 1; _p <= 60; i = ++_p) {
      for (row = _q = 0; 0 <= last_index ? _q <= last_index : _q >= last_index; row = 0 <= last_index ? ++_q : --_q) {
        for (col = _r = 0; 0 <= last_index ? _r <= last_index : _r >= last_index; col = 0 <= last_index ? ++_r : --_r) {
          if (map[row][col] === i) {
            if (i % 3 === 2) {
              free = 0;
              for (shift_row = _s = -1; _s <= 1; shift_row = ++_s) {
                for (shift_col = _t = -1; _t <= 1; shift_col = ++_t) {
                  if (!map[row + shift_row][col + shift_col]) {
                    free++;
                  }
                }
              }
              blockRandomDir(row, col);
            } else {
              for (shift_row = _u = -1; _u <= 1; shift_row = ++_u) {
                for (shift_col = _v = -1; _v <= 1; shift_col = ++_v) {
                  if (map[row + shift_row][col + shift_col] === i + 1) {
                    map[row + shift_row][col + shift_col] = -1;
                  }
                }
              }
            }
            if (map[row + 1][col] === 0) {
              map[row + 1][col] = i + 1;
            }
            if (map[row][col + 1] === 0) {
              map[row][col + 1] = i + 1;
            }
            if (map[row - 1][col] === 0) {
              map[row - 1][col] = i + 1;
            }
            if (map[row][col - 1] === 0) {
              map[row][col - 1] = i + 1;
            }
          }
        }
      }
      renderSourceMap(map);
    }
    return map;
  };

  renderSourceMap = function(map) {
    var $map, cell, row, _i, _len, _results;
    $map = $('#map').empty();
    _results = [];
    for (_i = 0, _len = map.length; _i < _len; _i++) {
      row = map[_i];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          cell = row[_j];
          _results1.push($map.append($('<div>').text(cell).addClass("d-" + cell)));
        }
        return _results1;
      })());
    }
    return _results;
  };

  $(function() {
    return renderSourceMap(makeSourceMap(15));
  });

}).call(this);


//# sourceMappingURL=game.js.map
